{"version":3,"sources":["components/Feedback/RenderButtons/RenderButtons.js","components/Feedback/RenderStatistic/RenderStatistic.js","components/Feedback/Feedback.js","App.js","index.js"],"names":["RenderButtons","clickHandler","name","names","Object","keys","map","i","type","onClick","Statistic","value","countTotalFeedback","countPositiveFeedbackPercentage","good","neutral","bad","Feedback","useState","setGood","setNeutral","setBad","Math","ceil","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAyBeA,EAtBO,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,aAAaC,EAAU,EAAVA,KAChCC,EAAQC,OAAOC,KAAKH,GACxB,OACE,mCACA,6BACCC,EAAMG,KAAI,SAACC,GAAD,OACX,6BACE,wBACEC,KAAK,SACLC,QAAS,WACPR,EAAaM,IAHjB,SAMGA,KAPIA,WCaEG,EAnBG,SAAC,GAIZ,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,mBACAC,EACI,EADJA,gCAEA,OACE,+BACE,wCAAWF,EAAMG,QACjB,2CAAcH,EAAMI,WACpB,uCAAUJ,EAAMK,OAChB,yCAAYJ,KACZ,oDAEGC,GAAmC,EAFtC,YC8CSI,EAtDG,WAEhB,MAAwBC,mBAAS,GAAjC,mBAAOJ,EAAP,KAAaK,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOH,EAAP,KAAgBK,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOF,EAAP,KAAYK,EAAZ,KAmBMT,EAAqB,WACzB,OAAOE,EAAOC,EAAUC,GAQxB,OACE,gCACE,uDACA,cAAC,EAAD,CAAed,KAAM,CAACY,OAAKC,UAAQC,OACnCf,aA9BU,SAACU,GACf,OAAQA,GACR,IAAK,OACHQ,EAAQL,EAAM,GAChB,MACA,IAAK,UACHM,EAAWL,EAAS,GACtB,MACA,IAAK,MACHM,EAAOL,EAAK,OAuBV,4CAECJ,IACC,cAAC,EAAD,CACED,MAAO,CAACG,OAAKC,UAAQC,OACrBJ,mBAAoBA,IACpBC,gCAhBDS,KAAKC,KAAMT,EAAOF,IAAwB,OAmB3C,sDC9CKY,MAJf,WACE,OAAO,cAAC,EAAD,KCCTC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.f73f3e9d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\n\r\nconst RenderButtons = ({ clickHandler,name}) => {\r\nconst names = Object.keys(name)\r\n  return (\r\n    <>\r\n    <ul>\r\n   { names.map((i)=>   \r\n    <li key={i}>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          clickHandler(i);\r\n        }}\r\n      >\r\n        {i}\r\n      </button>\r\n    </li>\r\n  )}\r\n  </ul>\r\n  </>\r\n  );\r\n};\r\n\r\nexport default RenderButtons;\r\n\r\nRenderButtons.propTypes={\r\n  clickHandler:PropTypes.func.isRequired,\r\n  name:PropTypes.object.isRequired,\r\n}","import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Statistic = ({\r\n  value,\r\n  countTotalFeedback,\r\n  countPositiveFeedbackPercentage,\r\n}) => {\r\n  return (\r\n    <ul>\r\n      <li>Good: {value.good}</li>\r\n      <li>Neutral: {value.neutral}</li>\r\n      <li>Bad: {value.bad}</li>\r\n      <li>Total: {countTotalFeedback}</li>\r\n      <li>\r\n        Positive feedback:\r\n        {countPositiveFeedbackPercentage || 0} %\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Statistic;\r\n\r\nStatistic.propTypes={\r\n  value:PropTypes.object.isRequired,\r\n  countTotalFeedback:PropTypes.number.isRequired,\r\n  countPositiveFeedbackPercentage:PropTypes.number.isRequired,\r\n}","import React from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nimport RenderButtons from \"./RenderButtons/RenderButtons\";\r\nimport Statistic from \"./RenderStatistic/RenderStatistic\";\r\n\r\nconst Feedback  = () => {\r\n\r\n  const [good, setGood] = useState(0)\r\n  const [neutral, setNeutral] = useState(0)\r\n  const [bad, setBad] = useState(0)\r\n\r\n  const onClick = (value) => {\r\n    switch (value){\r\n    case \"good\": \r\n      setGood(good +1)\r\n    break;\r\n    case \"neutral\":\r\n      setNeutral(neutral +1)\r\n    break;\r\n    case \"bad\":\r\n      setBad(bad +1)\r\n    break;\r\n    default:\r\n      break;\r\n\r\n}\r\n  };\r\n\r\n  const countTotalFeedback = () => {\r\n    return good + neutral + bad;\r\n  };\r\n\r\n  const countPositiveFeedbackPercentage = () => {\r\n    return Math.ceil((good / countTotalFeedback()) * 100);\r\n  };\r\n\r\n  \r\n    return (\r\n      <div>\r\n        <h1>Please Leave feedback</h1>\r\n        <RenderButtons name={{good,neutral,bad}} \r\n        clickHandler={onClick} \r\n        />\r\n        <h2>Statistics</h2>\r\n\r\n        {countTotalFeedback() ? (\r\n          <Statistic\r\n            value={{good,neutral,bad}}\r\n            countTotalFeedback={countTotalFeedback()}\r\n            countPositiveFeedbackPercentage={countPositiveFeedbackPercentage()}\r\n          />\r\n        ) : (\r\n          <p>No feedback given</p>\r\n        )}\r\n      </div>\r\n    );\r\n  \r\n}\r\n\r\nexport default Feedback ","import React from \"react\";\r\nimport Feedback from \"./components/Feedback/Feedback\";\r\n\r\nfunction App() {\r\n  return <Feedback />;\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}